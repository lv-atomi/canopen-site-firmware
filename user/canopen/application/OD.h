/*******************************************************************************
    CANopen Object Dictionary definition for CANopenNode V4

    This file was automatically generated by CANopenEditor 

    https://github.com/CANopenNode/CANopenNode
    https://github.com/CANopenNode/CANopenEditor

    DON'T EDIT THIS FILE MANUALLY !!!!
********************************************************************************

    File info:
        File Names:   OD.h; OD.c
        Project File: DS301_profile2.xdd
        File Version: 1

        Created:      2020/11/28 13:37:00
        Created By:   Janez Paternoster
        Modified:     2023/7/4 21:59:08
        Modified By:  Janez Paternoster

    Device Info:
        Vendor Name:  lv
        Vendor ID:    1234
        Product Name: Demo device
        Product ID:   1234

        Description:  Demo CANopen device with example usage.
*******************************************************************************/

#ifndef OD_H
#define OD_H
/*******************************************************************************
    Counters of OD objects
*******************************************************************************/
#define OD_CNT_NMT 1
#define OD_CNT_EM 1
#define OD_CNT_SYNC 1
#define OD_CNT_SYNC_PROD 1
#define OD_CNT_STORAGE 1
#define OD_CNT_TIME 1
#define OD_CNT_EM_PROD 1
#define OD_CNT_HB_CONS 1
#define OD_CNT_HB_PROD 1
#define OD_CNT_SDO_SRV 1
#define OD_CNT_SDO_CLI 1
#define OD_CNT_RPDO 4
#define OD_CNT_TPDO 4


/*******************************************************************************
    Sizes of OD arrays
*******************************************************************************/
#define OD_CNT_ARR_1003 16
#define OD_CNT_ARR_1010 6
#define OD_CNT_ARR_1011 6
#define OD_CNT_ARR_1016 8
#define OD_CNT_ARR_2110 16
#define OD_CNT_ARR_2111 16
#define OD_CNT_ARR_2112 16
#define OD_CNT_ARR_6100 8
#define OD_CNT_ARR_6303 4
#define OD_CNT_ARR_6400 2
#define OD_CNT_ARR_6401 2
#define OD_CNT_ARR_6403 2
#define OD_CNT_ARR_6600 4


/*******************************************************************************
    OD data declaration of all groups
*******************************************************************************/
typedef struct {
    uint32_t x1000_deviceType;
    uint32_t x1005_COB_ID_SYNCMessage;
    uint32_t x1006_communicationCyclePeriod;
    uint32_t x1007_synchronousWindowLength;
    uint32_t x1012_COB_IDTimeStampObject;
    uint32_t x1014_COB_ID_EMCY;
    uint16_t x1015_inhibitTimeEMCY;
    uint8_t x1016_consumerHeartbeatTime_sub0;
    uint32_t x1016_consumerHeartbeatTime[OD_CNT_ARR_1016];
    uint16_t x1017_producerHeartbeatTime;
    struct {
        uint8_t highestSub_indexSupported;
        uint32_t vendor_ID;
        uint32_t productCode;
        uint32_t revisionNumber;
        uint32_t serialNumber;
    } x1018_identity;
    uint8_t x1019_synchronousCounterOverflowValue;
    struct {
        uint8_t highestSub_indexSupported;
        uint32_t COB_IDClientToServerTx;
        uint32_t COB_IDServerToClientRx;
        uint8_t node_IDOfTheSDOServer;
    } x1280_SDOClientParameter;
    struct {
        uint8_t highestSub_indexSupported;
        uint32_t COB_IDUsedByRPDO;
        uint8_t transmissionType;
        uint16_t eventTimer;
    } x1400_RPDOCommunicationParameter;
    struct {
        uint8_t highestSub_indexSupported;
        uint32_t COB_IDUsedByRPDO;
        uint8_t transmissionType;
        uint16_t eventTimer;
    } x1401_RPDOCommunicationParameter;
    struct {
        uint8_t highestSub_indexSupported;
        uint32_t COB_IDUsedByRPDO;
        uint8_t transmissionType;
        uint16_t eventTimer;
    } x1402_RPDOCommunicationParameter;
    struct {
        uint8_t highestSub_indexSupported;
        uint32_t COB_IDUsedByRPDO;
        uint8_t transmissionType;
        uint16_t eventTimer;
    } x1403_RPDOCommunicationParameter;
    struct {
        uint8_t numberOfMappedApplicationObjectsInPDO;
        uint32_t applicationObject1;
        uint32_t applicationObject2;
        uint32_t applicationObject3;
        uint32_t applicationObject4;
        uint32_t applicationObject5;
        uint32_t applicationObject6;
        uint32_t applicationObject7;
        uint32_t applicationObject8;
    } x1600_RPDOMappingParameter;
    struct {
        uint8_t numberOfMappedApplicationObjectsInPDO;
        uint32_t applicationObject1;
        uint32_t applicationObject2;
        uint32_t applicationObject3;
        uint32_t applicationObject4;
        uint32_t applicationObject5;
        uint32_t applicationObject6;
        uint32_t applicationObject7;
        uint32_t applicationObject8;
    } x1601_RPDOMappingParameter;
    struct {
        uint8_t numberOfMappedApplicationObjectsInPDO;
        uint32_t applicationObject1;
        uint32_t applicationObject2;
        uint32_t applicationObject3;
        uint32_t applicationObject4;
        uint32_t applicationObject5;
        uint32_t applicationObject6;
        uint32_t applicationObject7;
        uint32_t applicationObject8;
    } x1602_RPDOMappingParameter;
    struct {
        uint8_t numberOfMappedApplicationObjectsInPDO;
        uint32_t applicationObject1;
        uint32_t applicationObject2;
        uint32_t applicationObject3;
        uint32_t applicationObject4;
        uint32_t applicationObject5;
        uint32_t applicationObject6;
        uint32_t applicationObject7;
        uint32_t applicationObject8;
    } x1603_RPDOMappingParameter;
    struct {
        uint8_t highestSub_indexSupported;
        uint32_t COB_IDUsedByTPDO;
        uint8_t transmissionType;
        uint16_t inhibitTime;
        uint16_t eventTimer;
        uint8_t SYNCStartValue;
    } x1800_TPDOCommunicationParameter;
    struct {
        uint8_t highestSub_indexSupported;
        uint32_t COB_IDUsedByTPDO;
        uint8_t transmissionType;
        uint16_t inhibitTime;
        uint16_t eventTimer;
        uint8_t SYNCStartValue;
    } x1801_TPDOCommunicationParameter;
    struct {
        uint8_t highestSub_indexSupported;
        uint32_t COB_IDUsedByTPDO;
        uint8_t transmissionType;
        uint16_t inhibitTime;
        uint16_t eventTimer;
        uint8_t SYNCStartValue;
    } x1802_TPDOCommunicationParameter;
    struct {
        uint8_t highestSub_indexSupported;
        uint32_t COB_IDUsedByTPDO;
        uint8_t transmissionType;
        uint16_t inhibitTime;
        uint16_t eventTimer;
        uint8_t SYNCStartValue;
    } x1803_TPDOCommunicationParameter;
    struct {
        uint8_t numberOfMappedApplicationObjectsInPDO;
        uint32_t applicationObject1;
        uint32_t applicationObject2;
        uint32_t applicationObject3;
        uint32_t applicationObject4;
        uint32_t applicationObject5;
        uint32_t applicationObject6;
        uint32_t applicationObject7;
        uint32_t applicationObject8;
    } x1A00_TPDOMappingParameter;
    struct {
        uint8_t numberOfMappedApplicationObjectsInPDO;
        uint32_t applicationObject1;
        uint32_t applicationObject2;
        uint32_t applicationObject3;
        uint32_t applicationObject4;
        uint32_t applicationObject5;
        uint32_t applicationObject6;
        uint32_t applicationObject7;
        uint32_t applicationObject8;
    } x1A01_TPDOMappingParameter;
    struct {
        uint8_t numberOfMappedApplicationObjectsInPDO;
        uint32_t applicationObject1;
        uint32_t applicationObject2;
        uint32_t applicationObject3;
        uint32_t applicationObject4;
        uint32_t applicationObject5;
        uint32_t applicationObject6;
        uint32_t applicationObject7;
        uint32_t applicationObject8;
    } x1A02_TPDOMappingParameter;
    struct {
        uint8_t numberOfMappedApplicationObjectsInPDO;
        uint32_t applicationObject1;
        uint32_t applicationObject2;
        uint32_t applicationObject3;
        uint32_t applicationObject4;
        uint32_t applicationObject5;
        uint32_t applicationObject6;
        uint32_t applicationObject7;
        uint32_t applicationObject8;
    } x1A03_TPDOMappingParameter;
} OD_PERSIST_COMM_t;

typedef struct {
    uint8_t x1001_errorRegister;
    uint8_t x1010_storeParameters_sub0;
    uint32_t x1010_storeParameters[OD_CNT_ARR_1010];
    uint8_t x1011_restoreDefaultParameters_sub0;
    uint32_t x1011_restoreDefaultParameters[OD_CNT_ARR_1011];
    struct {
        uint8_t highestSub_indexSupported;
        uint32_t COB_IDClientToServerRx;
        uint32_t COB_IDServerToClientTx;
    } x1200_SDOServerParameter;
    uint8_t x2100_errorStatusBits[1];
    uint8_t x2110_variableInt32_sub0;
    int32_t x2110_variableInt32[OD_CNT_ARR_2110];
    uint32_t x6001_PSU_CurrentRead;
    uint32_t x6002_PSU_VoltageRead;
    uint32_t x6003_PSU_CurentSet;
    uint32_t x6004_PSU_VoltageSet;
    int32_t x6005_PSUModuleTemperature;
    uint8_t x6100_triggerInputX8_sub0;
    bool_t x6100_triggerInputX8[OD_CNT_ARR_6100];
    struct {
        uint8_t highestSub_indexSupported;
        bool_t isBrushlessMotor;
        int32_t motorSpeedSet;
        int32_t motorSpeedRead;
    } x6101_motor;
    struct {
        uint8_t highestSub_indexSupported;
        bool_t strobe;
        bool_t trigger;
        int32_t XMove;
        int32_t YMove;
        int32_t ZMove;
        int32_t XTilt;
        int32_t YTilt;
        int32_t ZTilt;
        int32_t zoom;
        int32_t iris;
        int32_t focus;
    } x6200_cameraModule0;
    struct {
        uint8_t highestSub_indexSupported;
        bool_t strobe;
        bool_t trigger;
        int32_t XMove;
        int32_t YMove;
        int32_t ZMove;
        int32_t XTilt;
        int32_t YTilt;
        int32_t ZTilt;
        int32_t zoom;
        int32_t iris;
        int32_t focus;
    } x6201_cameraModule1;
    struct {
        uint8_t highestSub_indexSupported;
        uint32_t currentSpeed;
        uint32_t targetSpeed;
    } x6300_FAN0;
    struct {
        uint8_t highestSub_indexSupported;
        uint32_t currentSpeed;
        uint32_t targetSpeed;
    } x6301_FAN1;
    struct {
        uint8_t highestSub_indexSupported;
        uint32_t currentSpeed;
        uint32_t targetSpeed;
    } x6302_FAN2;
    uint8_t x6303_thermalDS18B20X4_sub0;
    int32_t x6303_thermalDS18B20X4[OD_CNT_ARR_6303];
    uint8_t x6304_airConditionLoadControl;
    uint8_t x6305_airConditionStatus;
    uint8_t x6400_triggerInputX2_sub0;
    bool_t x6400_triggerInputX2[OD_CNT_ARR_6400];
    uint8_t x6401_triggerOutputX2_sub0;
    bool_t x6401_triggerOutputX2[OD_CNT_ARR_6401];
    uint32_t x6402_capacitorDisplacement;
    uint8_t x6403_thermocouplePT100X2_sub0;
    int32_t x6403_thermocouplePT100X2[OD_CNT_ARR_6403];
    struct {
        uint8_t highestSub_indexSupported;
        bool_t isBrushlessMotor;
        int32_t motorSpeedSet;
        int32_t motorSpeedRead;
    } x6404_motor;
    struct {
        uint8_t highestSub_indexSupported;
        bool_t out0;
        bool_t out1;
        bool_t in0;
        bool_t in1;
        int32_t HBridgeMotor;
        uint8_t I2CAddr;
    } x6500_stackableModule0;
    struct {
        uint8_t highestSub_indexSupported;
        bool_t out0;
        bool_t out1;
        bool_t in0;
        bool_t in1;
        int32_t HBridgeMotor;
        uint8_t I2CAddr;
    } x6501_stackableModule1;
    struct {
        uint8_t highestSub_indexSupported;
        bool_t out0;
        bool_t out1;
        bool_t in0;
        bool_t in1;
        int32_t HBridgeMotor;
        uint8_t I2CAddr;
    } x6502_stackableModule2;
    struct {
        uint8_t highestSub_indexSupported;
        bool_t out0;
        bool_t out1;
        bool_t in0;
        bool_t in1;
        int32_t HBridgeMotor;
        uint8_t I2CAddr;
    } x6503_stackableModule3;
    struct {
        uint8_t highestSub_indexSupported;
        bool_t out0;
        bool_t out1;
        bool_t in0;
        bool_t in1;
        int32_t HBridgeMotor;
        uint8_t I2CAddr;
    } x6504_stackableModule4;
    struct {
        uint8_t highestSub_indexSupported;
        bool_t out0;
        bool_t out1;
        bool_t in0;
        bool_t in1;
        int32_t HBridgeMotor;
        uint8_t I2CAddr;
    } x6505_stackableModule5;
    struct {
        uint8_t highestSub_indexSupported;
        bool_t out0;
        bool_t out1;
        bool_t in0;
        bool_t in1;
        int32_t HBridgeMotor;
        uint8_t I2CAddr;
    } x6506_stackableModule6;
    struct {
        uint8_t highestSub_indexSupported;
        bool_t out0;
        bool_t out1;
        bool_t in0;
        bool_t in1;
        int32_t HBridgeMotor;
        uint8_t I2CAddr;
    } x6507_stackableModule7;
    uint8_t x6600_weightSensorX4_sub0;
    uint32_t x6600_weightSensorX4[OD_CNT_ARR_6600];
    uint32_t x6700_lineCurrent;
    uint32_t x6701_lineVoltage;
    int32_t x6702_IGBT_Temperature;
    int32_t x6703_plateTemperature;
    uint32_t x6704_systemLoad;
    struct {
        uint8_t highestSub_indexSupported;
        uint32_t currentSpeed;
        uint32_t targetSpeed;
    } x6705_FAN0;
} OD_RAM_t;

typedef struct {
    uint32_t x2106_power_onCounter;
    uint8_t x2112_variableNV_Int32AutoSave_sub0;
    int32_t x2112_variableNV_Int32AutoSave[OD_CNT_ARR_2112];
} OD_PERSIST_APP_AUTO_t;

typedef struct {
    uint8_t x2111_variableInt32Save_sub0;
    int32_t x2111_variableInt32Save[OD_CNT_ARR_2111];
    struct {
        uint8_t highestSub_indexSupported;
        int64_t I64;
        uint64_t U64;
        float32_t R32;
        float64_t R64;
        uint16_t parameterWithDefaultValue;
    } x2120_demoRecord;
    struct {
        uint8_t highestSub_indexSupported;
        char stringShort[4];
        char stringLong[111];
        uint8_t octetString[3];
    } x2121_demoStrings;
    uint8_t x6000_boardType;
} OD_PERSIST_APP_t;

#ifndef OD_ATTR_PERSIST_COMM
#define OD_ATTR_PERSIST_COMM
#endif
extern OD_ATTR_PERSIST_COMM OD_PERSIST_COMM_t OD_PERSIST_COMM;

#ifndef OD_ATTR_RAM
#define OD_ATTR_RAM
#endif
extern OD_ATTR_RAM OD_RAM_t OD_RAM;

#ifndef OD_ATTR_PERSIST_APP_AUTO
#define OD_ATTR_PERSIST_APP_AUTO
#endif
extern OD_ATTR_PERSIST_APP_AUTO OD_PERSIST_APP_AUTO_t OD_PERSIST_APP_AUTO;

#ifndef OD_ATTR_PERSIST_APP
#define OD_ATTR_PERSIST_APP
#endif
extern OD_ATTR_PERSIST_APP OD_PERSIST_APP_t OD_PERSIST_APP;

#ifndef OD_ATTR_OD
#define OD_ATTR_OD
#endif
extern OD_ATTR_OD OD_t *OD;


/*******************************************************************************
    Object dictionary entries - shortcuts
*******************************************************************************/
#define OD_ENTRY_H1000 &OD->list[0]
#define OD_ENTRY_H1001 &OD->list[1]
#define OD_ENTRY_H1003 &OD->list[2]
#define OD_ENTRY_H1005 &OD->list[3]
#define OD_ENTRY_H1006 &OD->list[4]
#define OD_ENTRY_H1007 &OD->list[5]
#define OD_ENTRY_H1008 &OD->list[6]
#define OD_ENTRY_H1009 &OD->list[7]
#define OD_ENTRY_H100A &OD->list[8]
#define OD_ENTRY_H1010 &OD->list[9]
#define OD_ENTRY_H1011 &OD->list[10]
#define OD_ENTRY_H1012 &OD->list[11]
#define OD_ENTRY_H1014 &OD->list[12]
#define OD_ENTRY_H1015 &OD->list[13]
#define OD_ENTRY_H1016 &OD->list[14]
#define OD_ENTRY_H1017 &OD->list[15]
#define OD_ENTRY_H1018 &OD->list[16]
#define OD_ENTRY_H1019 &OD->list[17]
#define OD_ENTRY_H1200 &OD->list[18]
#define OD_ENTRY_H1280 &OD->list[19]
#define OD_ENTRY_H1400 &OD->list[20]
#define OD_ENTRY_H1401 &OD->list[21]
#define OD_ENTRY_H1402 &OD->list[22]
#define OD_ENTRY_H1403 &OD->list[23]
#define OD_ENTRY_H1600 &OD->list[24]
#define OD_ENTRY_H1601 &OD->list[25]
#define OD_ENTRY_H1602 &OD->list[26]
#define OD_ENTRY_H1603 &OD->list[27]
#define OD_ENTRY_H1800 &OD->list[28]
#define OD_ENTRY_H1801 &OD->list[29]
#define OD_ENTRY_H1802 &OD->list[30]
#define OD_ENTRY_H1803 &OD->list[31]
#define OD_ENTRY_H1A00 &OD->list[32]
#define OD_ENTRY_H1A01 &OD->list[33]
#define OD_ENTRY_H1A02 &OD->list[34]
#define OD_ENTRY_H1A03 &OD->list[35]
#define OD_ENTRY_H2100 &OD->list[36]
#define OD_ENTRY_H2106 &OD->list[37]
#define OD_ENTRY_H2110 &OD->list[38]
#define OD_ENTRY_H2111 &OD->list[39]
#define OD_ENTRY_H2112 &OD->list[40]
#define OD_ENTRY_H2120 &OD->list[41]
#define OD_ENTRY_H2121 &OD->list[42]
#define OD_ENTRY_H2122 &OD->list[43]
#define OD_ENTRY_H6000 &OD->list[44]
#define OD_ENTRY_H6001 &OD->list[45]
#define OD_ENTRY_H6002 &OD->list[46]
#define OD_ENTRY_H6003 &OD->list[47]
#define OD_ENTRY_H6004 &OD->list[48]
#define OD_ENTRY_H6005 &OD->list[49]
#define OD_ENTRY_H6100 &OD->list[50]
#define OD_ENTRY_H6101 &OD->list[51]
#define OD_ENTRY_H6200 &OD->list[52]
#define OD_ENTRY_H6201 &OD->list[53]
#define OD_ENTRY_H6300 &OD->list[54]
#define OD_ENTRY_H6301 &OD->list[55]
#define OD_ENTRY_H6302 &OD->list[56]
#define OD_ENTRY_H6303 &OD->list[57]
#define OD_ENTRY_H6304 &OD->list[58]
#define OD_ENTRY_H6305 &OD->list[59]
#define OD_ENTRY_H6400 &OD->list[60]
#define OD_ENTRY_H6401 &OD->list[61]
#define OD_ENTRY_H6402 &OD->list[62]
#define OD_ENTRY_H6403 &OD->list[63]
#define OD_ENTRY_H6404 &OD->list[64]
#define OD_ENTRY_H6500 &OD->list[65]
#define OD_ENTRY_H6501 &OD->list[66]
#define OD_ENTRY_H6502 &OD->list[67]
#define OD_ENTRY_H6503 &OD->list[68]
#define OD_ENTRY_H6504 &OD->list[69]
#define OD_ENTRY_H6505 &OD->list[70]
#define OD_ENTRY_H6506 &OD->list[71]
#define OD_ENTRY_H6507 &OD->list[72]
#define OD_ENTRY_H6600 &OD->list[73]
#define OD_ENTRY_H6700 &OD->list[74]
#define OD_ENTRY_H6701 &OD->list[75]
#define OD_ENTRY_H6702 &OD->list[76]
#define OD_ENTRY_H6703 &OD->list[77]
#define OD_ENTRY_H6704 &OD->list[78]
#define OD_ENTRY_H6705 &OD->list[79]


/*******************************************************************************
    Object dictionary entries - shortcuts with names
*******************************************************************************/
#define OD_ENTRY_H1000_deviceType &OD->list[0]
#define OD_ENTRY_H1001_errorRegister &OD->list[1]
#define OD_ENTRY_H1003_pre_definedErrorField &OD->list[2]
#define OD_ENTRY_H1005_COB_ID_SYNCMessage &OD->list[3]
#define OD_ENTRY_H1006_communicationCyclePeriod &OD->list[4]
#define OD_ENTRY_H1007_synchronousWindowLength &OD->list[5]
#define OD_ENTRY_H1008_manufacturerDeviceName &OD->list[6]
#define OD_ENTRY_H1009_manufacturerHardwareVersion &OD->list[7]
#define OD_ENTRY_H100A_manufacturerSoftwareVersion &OD->list[8]
#define OD_ENTRY_H1010_storeParameters &OD->list[9]
#define OD_ENTRY_H1011_restoreDefaultParameters &OD->list[10]
#define OD_ENTRY_H1012_COB_IDTimeStampObject &OD->list[11]
#define OD_ENTRY_H1014_COB_ID_EMCY &OD->list[12]
#define OD_ENTRY_H1015_inhibitTimeEMCY &OD->list[13]
#define OD_ENTRY_H1016_consumerHeartbeatTime &OD->list[14]
#define OD_ENTRY_H1017_producerHeartbeatTime &OD->list[15]
#define OD_ENTRY_H1018_identity &OD->list[16]
#define OD_ENTRY_H1019_synchronousCounterOverflowValue &OD->list[17]
#define OD_ENTRY_H1200_SDOServerParameter &OD->list[18]
#define OD_ENTRY_H1280_SDOClientParameter &OD->list[19]
#define OD_ENTRY_H1400_RPDOCommunicationParameter &OD->list[20]
#define OD_ENTRY_H1401_RPDOCommunicationParameter &OD->list[21]
#define OD_ENTRY_H1402_RPDOCommunicationParameter &OD->list[22]
#define OD_ENTRY_H1403_RPDOCommunicationParameter &OD->list[23]
#define OD_ENTRY_H1600_RPDOMappingParameter &OD->list[24]
#define OD_ENTRY_H1601_RPDOMappingParameter &OD->list[25]
#define OD_ENTRY_H1602_RPDOMappingParameter &OD->list[26]
#define OD_ENTRY_H1603_RPDOMappingParameter &OD->list[27]
#define OD_ENTRY_H1800_TPDOCommunicationParameter &OD->list[28]
#define OD_ENTRY_H1801_TPDOCommunicationParameter &OD->list[29]
#define OD_ENTRY_H1802_TPDOCommunicationParameter &OD->list[30]
#define OD_ENTRY_H1803_TPDOCommunicationParameter &OD->list[31]
#define OD_ENTRY_H1A00_TPDOMappingParameter &OD->list[32]
#define OD_ENTRY_H1A01_TPDOMappingParameter &OD->list[33]
#define OD_ENTRY_H1A02_TPDOMappingParameter &OD->list[34]
#define OD_ENTRY_H1A03_TPDOMappingParameter &OD->list[35]
#define OD_ENTRY_H2100_errorStatusBits &OD->list[36]
#define OD_ENTRY_H2106_power_onCounter &OD->list[37]
#define OD_ENTRY_H2110_variableInt32 &OD->list[38]
#define OD_ENTRY_H2111_variableInt32Save &OD->list[39]
#define OD_ENTRY_H2112_variableNV_Int32AutoSave &OD->list[40]
#define OD_ENTRY_H2120_demoRecord &OD->list[41]
#define OD_ENTRY_H2121_demoStrings &OD->list[42]
#define OD_ENTRY_H2122_demoDomain &OD->list[43]
#define OD_ENTRY_H6000_boardType &OD->list[44]
#define OD_ENTRY_H6001_PSU_CurrentRead &OD->list[45]
#define OD_ENTRY_H6002_PSU_VoltageRead &OD->list[46]
#define OD_ENTRY_H6003_PSU_CurentSet &OD->list[47]
#define OD_ENTRY_H6004_PSU_VoltageSet &OD->list[48]
#define OD_ENTRY_H6005_PSUModuleTemperature &OD->list[49]
#define OD_ENTRY_H6100_triggerInputX8 &OD->list[50]
#define OD_ENTRY_H6101_motor &OD->list[51]
#define OD_ENTRY_H6200_cameraModule0 &OD->list[52]
#define OD_ENTRY_H6201_cameraModule1 &OD->list[53]
#define OD_ENTRY_H6300_FAN0 &OD->list[54]
#define OD_ENTRY_H6301_FAN1 &OD->list[55]
#define OD_ENTRY_H6302_FAN2 &OD->list[56]
#define OD_ENTRY_H6303_thermalDS18B20X4 &OD->list[57]
#define OD_ENTRY_H6304_airConditionLoadControl &OD->list[58]
#define OD_ENTRY_H6305_airConditionStatus &OD->list[59]
#define OD_ENTRY_H6400_triggerInputX2 &OD->list[60]
#define OD_ENTRY_H6401_triggerOutputX2 &OD->list[61]
#define OD_ENTRY_H6402_capacitorDisplacement &OD->list[62]
#define OD_ENTRY_H6403_thermocouplePT100X2 &OD->list[63]
#define OD_ENTRY_H6404_motor &OD->list[64]
#define OD_ENTRY_H6500_stackableModule0 &OD->list[65]
#define OD_ENTRY_H6501_stackableModule1 &OD->list[66]
#define OD_ENTRY_H6502_stackableModule2 &OD->list[67]
#define OD_ENTRY_H6503_stackableModule3 &OD->list[68]
#define OD_ENTRY_H6504_stackableModule4 &OD->list[69]
#define OD_ENTRY_H6505_stackableModule5 &OD->list[70]
#define OD_ENTRY_H6506_stackableModule6 &OD->list[71]
#define OD_ENTRY_H6507_stackableModule7 &OD->list[72]
#define OD_ENTRY_H6600_weightSensorX4 &OD->list[73]
#define OD_ENTRY_H6700_lineCurrent &OD->list[74]
#define OD_ENTRY_H6701_lineVoltage &OD->list[75]
#define OD_ENTRY_H6702_IGBT_Temperature &OD->list[76]
#define OD_ENTRY_H6703_plateTemperature &OD->list[77]
#define OD_ENTRY_H6704_systemLoad &OD->list[78]
#define OD_ENTRY_H6705_FAN0 &OD->list[79]


/*******************************************************************************
    OD config structure
*******************************************************************************/
#ifdef CO_MULTIPLE_OD
#define OD_INIT_CONFIG(config) {\
    (config).CNT_NMT = OD_CNT_NMT;\
    (config).ENTRY_H1017 = OD_ENTRY_H1017;\
    (config).CNT_HB_CONS = OD_CNT_HB_CONS;\
    (config).CNT_ARR_1016 = OD_CNT_ARR_1016;\
    (config).ENTRY_H1016 = OD_ENTRY_H1016;\
    (config).CNT_EM = OD_CNT_EM;\
    (config).ENTRY_H1001 = OD_ENTRY_H1001;\
    (config).ENTRY_H1014 = OD_ENTRY_H1014;\
    (config).ENTRY_H1015 = OD_ENTRY_H1015;\
    (config).CNT_ARR_1003 = OD_CNT_ARR_1003;\
    (config).ENTRY_H1003 = OD_ENTRY_H1003;\
    (config).CNT_SDO_SRV = OD_CNT_SDO_SRV;\
    (config).ENTRY_H1200 = OD_ENTRY_H1200;\
    (config).CNT_SDO_CLI = OD_CNT_SDO_CLI;\
    (config).ENTRY_H1280 = OD_ENTRY_H1280;\
    (config).CNT_TIME = OD_CNT_TIME;\
    (config).ENTRY_H1012 = OD_ENTRY_H1012;\
    (config).CNT_SYNC = OD_CNT_SYNC;\
    (config).ENTRY_H1005 = OD_ENTRY_H1005;\
    (config).ENTRY_H1006 = OD_ENTRY_H1006;\
    (config).ENTRY_H1007 = OD_ENTRY_H1007;\
    (config).ENTRY_H1019 = OD_ENTRY_H1019;\
    (config).CNT_RPDO = OD_CNT_RPDO;\
    (config).ENTRY_H1400 = OD_ENTRY_H1400;\
    (config).ENTRY_H1600 = OD_ENTRY_H1600;\
    (config).CNT_TPDO = OD_CNT_TPDO;\
    (config).ENTRY_H1800 = OD_ENTRY_H1800;\
    (config).ENTRY_H1A00 = OD_ENTRY_H1A00;\
    (config).CNT_LEDS = 0;\
    (config).CNT_GFC = 0;\
    (config).ENTRY_H1300 = NULL;\
    (config).CNT_SRDO = 0;\
    (config).ENTRY_H1301 = NULL;\
    (config).ENTRY_H1381 = NULL;\
    (config).ENTRY_H13FE = NULL;\
    (config).ENTRY_H13FF = NULL;\
    (config).CNT_LSS_SLV = 0;\
    (config).CNT_LSS_MST = 0;\
    (config).CNT_GTWA = 0;\
    (config).CNT_TRACE = 0;\
}
#endif

#endif /* OD_H */
